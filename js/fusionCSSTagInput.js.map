{"mappings":"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","sources":["js/src/fusionCSSTagInput.js"],"sourcesContent":["/**\n * JavaScript implement tag based input field using jQuery or fusionLib.\n *\n * THIS SOFTWARE IS PROVIDED \"AS IS\" AND WITHOUT ANY EXPRESS OR IMPLIED\n * WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.\n *\n * @package fusionCSS\n * @copyright Copyright (c) 2019 fusionCSS. All rights reserved.\n * @link http://fusionCSS.com\n */\n\n(function() {\n\n\t/**\n\t * Element used for copy functions.\n\t *\n\t * @type {element}\n\t */\n\tvar copyElement = null;\n\n\t/**\n\t * Encode HTML entities.\n\t * @param {string} string to escape.\n\t * @return {string}\n\t */\n\tfunction htmlEntities(string) {\n\t\treturn String(string).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;');\n\t}\n\n\t/**\n\t * Test if the tag is already present.\n\t * @param {array} input The input element to test against.\n\t * @param {string} tag The tag to test for.\n\t * @returns {boolean}\n\t */\n\tfunction tagExists(input, tag) {\n\t\tvar tagList = input.val().split(input.attr('data-delimiter'));\n\t\treturn tagList.indexOf(tag) > -1;\n\t}\n\n\t/**\n\t * Load a string of tags into the input.\n\t * @param {object} settings The settings.\n\t * @param {array} input The input element to add tags to.\n\t * @param {string} tagString The comma separated list of tags.\n\t * @return {array} The input element.\n\t */\n\tfunction loadTags(settings, input, tagString) {\n\n\t\t// Remove old value and tags\n\t\tinput.val('');\n\t\t$('#' + input.attr('id') + '_tagInputWidget .tag').remove();\n\n\t\t// Create tags from the string\n\t\tvar tagList = tagString.split(input.attr('data-delimiter'));\n\t\tfor(var i=0; i<tagList.length; i++)\n\t\t\taddTag(settings, input, tagList[i], false);\n\n\t\treturn input;\n\t}\n\n\t/**\n\t * Add a new tag to the input.\n\t * @param {object} settings The settings.\n\t * @param {array} input The input element to add to.\n\t * @param {string} value The tag to add.\n\t * @param {boolean} focus true if to focus.\n\t */\n\tfunction addTag(settings, input, value, focus) {\n\n\t\t// Remove white space and check we have data\n\t\tvalue = value.trim();\n\t\tif(value.length) {\n\n\t\t\t// Split the input in case it's a paste of many tags\n\t\t\tvar sourceTags = value.split(input.attr('data-delimiter')),\n\t\t\t\ttagList = input.val().split(input.attr('data-delimiter')),\n\t\t\t\ttagInput = $('#' + input.attr('id') + '_tagInput');\n\n\t\t\tif (tagList[0] == '')\n\t\t\t\ttagList = new Array();\n\n\t\t\t// Process all tags in the input\n\t\t\tfor(var i=0;i<sourceTags.length;i++) {\n\t\t\t\tvalue = sourceTags[i];\n\n\t\t\t\t// If tag exists then flag it\n\t\t\t\tif (tagExists(input, value)) {\n\n\t\t\t\t\t// Only flag error for a single tag\n\t\t\t\t\tif (sourceTags.length === 0)\n\t\t\t\t\t\ttagInput.addClass('invalidTag');\n\t\t\t\t}\n\t\t\t\t// Process the new tag\n\t\t\t\telse {\n\t\t\t\t\ttagInput\n\t\t\t\t\t\t.removeClass('invalidTag')\n\t\t\t\t\t\t.val('');\n\n\t\t\t\t\t// Add the tag HTML\n\t\t\t\t\t$(settings.tagHTML.replace(/\\{value\\}/g, htmlEntities(value)))\n\t\t\t\t\t\t.insertBefore(tagInput);\n\n\t\t\t\t\tif (focus)\n\t\t\t\t\t\ttagInput.focus();\n\t\t\t\t\telse\n\t\t\t\t\t\ttagInput.blur();\n\n\t\t\t\t\t// Update the field value with the new tag\n\t\t\t\t\ttagList.push(value);\n\t\t\t\t\tinput.val(tagList.join(input.attr('data-delimiter')));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Remove tag.\n\t * @param {object} settings The settings.\n\t * @param {array} input The input element to remote from.\n\t * @param {string} value The tag to remove.\n\t */\n\tfunction removeTag(settings, input, value) {\n\t\tvar delimiter = input.attr('data-delimiter'),\n\t\t\told = input.val().split(delimiter),\n\t\t\tidx = old.indexOf(value);\n\n\t\t// If tag found then remove it\n\t\tif(idx > -1) {\n\t\t\told.splice(idx, 1);\n\t\t\tloadTags(settings, input, old.join(delimiter));\n\t\t}\n\t}\n\n\t$.fn.extend({\n\n\t\t/**\n\t\t * Set tag values on the input element.\n\t\t * @param {string} tagString The string of tags.\n\t\t * @return {Array} The input element.\n\t\t */\n\t\tsetTags: function(tagString) {\n\t\t\treturn loadTags(this, tagString);\n\t\t},\n\n\t\t/**\n\t\t * Enable tag input widget.\n\t\t * @param {object} options The options.\n\t\t * @returns {*}\n\t\t */\n\t\tenableTagInput: function(options) {\n\t\t\tvar settings = $.extend(\n\t\t\t\t{\n\t\t\t\t\ttagHTML: '<div class=\"chip tag\"><span class=\"tagValue\">{value}</span><i class=\"tagDelete\">x</i></div>',\n\t\t\t\t\twidgetHTML: '<div id=\"{id}_tagInputWidget\" class=\"tagInputWidget\">' +\n\t\t\t\t\t\t'<input id=\"{id}_tagInput\" class=\"tagInput\" value=\"\" placeholder=\"{placeholder}\" />' +\n\t\t\t\t\t\t'</div>'\n\t\t\t\t},\n\t\t\t\toptions\n\t\t\t);\n\n\t\t\treturn this.each(function () {\n\t\t\t\tvar $el = $(this),\n\t\t\t\t\tid = $el.attr('id'),\n\t\t\t\t\tdelimiter = $el.attr('data-delimiter');\n\n\t\t\t\t// Don't init multiple times\n\t\t\t\tif($el.attr('data-init-done'))\n\t\t\t\t\treturn;\n\n\t\t\t\t// Flag initialised and hide input\n\t\t\t\t$el\n\t\t\t\t\t.attr('data-init-done', '1')\n\t\t\t\t\t.hide();\n\n\t\t\t\t// Add the widget to the page\n\t\t\t\t$(settings.widgetHTML.replace(/\\{id\\}/g, id).replace(/\\{placeholder\\}/g, $el.attr('data-placeholder')))\n\t\t\t\t\t.insertAfter($el);\n\n\t\t\t\t// Load load tags from the text\n\t\t\t\tloadTags(settings, $el, $el.val());\n\n\t\t\t\t// Focus the input field on click or remove tags if remove clicked\n\t\t\t\t$('#' + id + '_tagInputWidget').on('click', function (event) {\n\n\t\t\t\t\t// Remove clicked\n\t\t\t\t\tif ($(event.target).closest('.tagDelete').length) {\n\t\t\t\t\t\tevent.preventDefault();\n\n\t\t\t\t\t\tremoveTag(\n\t\t\t\t\t\t\tsettings,\n\t\t\t\t\t\t\t$el,\n\t\t\t\t\t\t\t$(event.target).closest('.tag').find('.tagValue').text()\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\t// Not remove so focus\n\t\t\t\t\telse {\n\t\t\t\t\t\t$('#' + id + '_tagInput').focus();\n\t\t\t\t\t}\n\n\t\t\t\t});\n\n\t\t\t\t// If leaving the filed then convert any remaining text to a tag\n\t\t\t\t$('#' + id + '_tagInput').on('blur', function (event) {\n\t\t\t\t\taddTag(settings, $el, $('#' + id + '_tagInput').val(), true);\n\t\t\t\t})\n\t\t\t\t\t// Handle key events\n\t\t\t\t\t.on('keydown', function (event) {\n\t\t\t\t\t\tvar $this = $(this);\n\n\t\t\t\t\t\t// Remove not valid\n\t\t\t\t\t\t$this.removeClass('invalidTag');\n\n\t\t\t\t\t\t// If enter or delimiter pressed\n\t\t\t\t\t\tif (event.key === 'Enter' || event.key === delimiter) {\n\t\t\t\t\t\t\tevent.preventDefault();\n\n\t\t\t\t\t\t\taddTag(settings, $el, $this.val(), true);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// If backspace clicked\n\t\t\t\t\t\telse if (event.key === 'Backspace' && $this.val() === '') {\n\t\t\t\t\t\t\tevent.preventDefault();\n\n\t\t\t\t\t\t\tremoveTag(\n\t\t\t\t\t\t\t\tsettings,\n\t\t\t\t\t\t\t\t$el,\n\t\t\t\t\t\t\t\t$this.closest('.tagInputWidget').find('.tag').last().find('.tagValue').text()\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t$this.focus();\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Else if copy\n\t\t\t\t\t\telse if((event.ctrlKey || event.metaKey) && event.key === 'c') {\n\n\t\t\t\t\t\t\t// If input field empty then we copy the tags\n\t\t\t\t\t\t\tif($this.val().length === 0) {\n\t\t\t\t\t\t\t\tevent.preventDefault();\n\n\t\t\t\t\t\t\t\t// Create the element to perform the copy if not already created\n\t\t\t\t\t\t\t\tif(!copyElement) {\n\t\t\t\t\t\t\t\t\tcopyElement = $('<textarea style=\"position:absolute; left:-9999px; top:0\">');\n\t\t\t\t\t\t\t\t\t$('body').append(copyElement);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// Copy the tags back to the input & select it\n\t\t\t\t\t\t\t\tcopyElement\n\t\t\t\t\t\t\t\t\t.val($el.val())\n\t\t\t\t\t\t\t\t\t.focus()\n\t\t\t\t\t\t\t\t\t[0].setSelectionRange(0, copyElement.val().length);\n\n\t\t\t\t\t\t\t\t// Copy\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tdocument.execCommand('copy');\n\t\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// Focus the input field again\n\t\t\t\t\t\t\t\t$this.focus();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t});\n\t\t}\n\t});\n\n})();\n"],"names":["copyElement","tagExists","input","tag","val","split","attr","indexOf","loadTags","settings","tagString","$","remove","tagList","i","length","addTag","value","focus","trim","sourceTags","tagInput","Array","addClass","removeClass","tagHTML","replace","string","String","insertBefore","blur","push","join","removeTag","delimiter","old","idx","splice","fn","extend","setTags","this","enableTagInput","options","widgetHTML","each","$el","id","hide","insertAfter","on","event","target","closest","preventDefault","find","text","$this","key","last","ctrlKey","metaKey","append","setSelectionRange","document","execCommand","e"],"version":3,"file":"fusionCSSTagInput.js.map"}