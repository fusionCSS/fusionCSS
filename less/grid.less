.row {
	clear: both;

	&:after {
		.clear
	}

	[class^="span"] {
		display: block;
		min-height: 1px;

		&.no-left-gutter {
			padding-left: 0;
		}

		&.no-right-gutter {
			padding-right: 0;
		}
		&.no-gutter {
			padding-left: 0;
			padding-right: 0;
		}
	}

	// Build a row of columns
	.makeRow(@spanName) {
		@colWidth: percentage((100 / @numColumns) / 100);

		[class^="@{spanName}"] {
			float: left;
			padding-left: @colGutter / 2;
			padding-right: @colGutter / 2;
		}

		.col(@name, @span) when (@span > 0) {
			.@{name}@{span} {
				width: @colWidth + (@colWidth * (@span - 1));
			}
			.@{name}-push@{span} {
				left: @colWidth + (@colWidth * (@span - 1));
			}
			.@{name}-pull@{span} {
				right: @colWidth + (@colWidth * (@span - 1));
			}
			.col(@name, @span - 1);
		}

		.@{spanName}-push0 {
			left: inherit;
		}
		.@{spanName}-pull0 {
			right: inherit;
		}

		.offset(@name, @span) when (@span > 0) {
			[class^="@{name}"].offset@{span} {
				margin-left: @colWidth * @span;
			}
			.offset(@name, @span - 1);
		}

		.col(@spanName, @numColumns);
		.offset(@spanName, @numColumns - 1);
	}

	.makeRow(span-t);

	@media (min-width: @breakpoint-s) {
		.row {
			margin-left: -@colGutter / 2;
			margin-right: -@colGutter / 2;
		}

		.makeRow(span);
		.makeRow(span-s);
	}

	@media (min-width: @breakpoint-m) {
		.row {
			margin-left: -@colGutter / 2;
			margin-right: -@colGutter / 2;
		}

		.makeRow(span-m);
	}

	@media (min-width: @breakpoint-l) {
		.row {
			margin-left: -@colGutter / 2;
			margin-right: -@colGutter / 2;
		}

		.makeRow(span-l);
	}
}
